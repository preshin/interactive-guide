{"version":3,"sources":["helpers/utils.js","views/Home/UserForm.js","views/Home/ButtonOptions.js","views/Home/index.js","App.js","reportWebVitals.js","index.js","context/AppContext.js"],"names":["validEmailRegex","RegExp","validateEmail","email","test","UserForm","handleOk","useState","openModal","setOpenModal","name","subject","description","formData","setFormData","formItems","id","label","AppContext","Consumer","goToNextPage","updateUserIssueInfo","history","pageId","length","map","className","placeholder","value","type","onChange","event","target","TextArea","onClick","disabled","title","visible","onOk","onCancel","closable","footer","nextPageId","currentPageId","display","ButtonOptions","buttonList","gutter","nextPage","xs","md","size","Home","goToPrevPage","question","answers","span","icon","ArrowLeftOutlined","justify","t","children","AppProvider","lazy","App","openSideBar","setOpenSideBar","fallback","sidebar","CloseOutlined","slice","selectedAnswer","Item","Math","random","open","styles","background","pullRight","onSetOpen","HistoryOutlined","style","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","createContext"],"mappings":"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","file":"static/js/main.30c5b913.chunk.js","sourcesContent":["const validEmailRegex = new RegExp(/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/);\nexport const validateEmail = (email) => {\n  return validEmailRegex.test(email);\n};\n","import { Input, Button, Card } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport { Fragment, useState } from \"react\";\nimport AppContext from \"../../context/AppContext\";\nimport { validateEmail } from \"../../helpers/utils\";\n\nconst UserForm = ({ handleOk }) => {\n  const [openModal, setOpenModal] = useState(false);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    description: \"\",\n  });\n\n  const formItems = [\n    {\n      id: \"name\",\n      label: \"Name\",\n    },\n\n    {\n      id: \"email\",\n      label: \"Email\",\n    },\n\n    {\n      id: \"subject\",\n      label: \"Subject\",\n    },\n\n    {\n      id: \"description\",\n      label: \"Description\",\n    },\n  ];\n\n  return (\n    <AppContext.Consumer>\n      {({ goToNextPage, updateUserIssueInfo, history, ...contextProps }) => {\n        const { pageId } = history[history.length - 1];\n\n        const onHandleSubmit = () => {\n          setOpenModal(true);\n          updateUserIssueInfo(formData);\n        };\n\n        return (\n          <>\n            <Card>\n              {formItems.map(({ label, id }) => (\n                <Fragment key={id}>\n                  <label>{`${label}:`}</label>\n                  {id !== \"description\" && (\n                    <Input\n                      className=\"mt-2 mb-2\"\n                      placeholder={`Enter ${label}`}\n                      value={formData[id]}\n                      type={id === \"email\" ? \"email\" : \"text\"}\n                      onChange={(event) =>\n                        setFormData({ ...formData, [id]: event.target.value })\n                      }\n                    />\n                  )}\n                  {id === \"description\" && (\n                    <Input.TextArea\n                      className=\"mt-2 mb-2\"\n                      placeholder={`Enter ${label}`}\n                      value={formData[id]}\n                      type=\"text\"\n                      onChange={(event) =>\n                        setFormData({ ...formData, [id]: event.target.value })\n                      }\n                    />\n                  )}\n                  {id === \"email\" &&\n                    formData.email.length !== 0 &&\n                    !validateEmail(formData.email) && (\n                      <p className=\"text-red-500 pt-1\">Enter valid Email</p>\n                    )}\n                </Fragment>\n              ))}\n              <Button\n                className=\"mt-3\"\n                type=\"primary\"\n                onClick={onHandleSubmit}\n                disabled={\n                  formData.name.length === 0 ||\n                  formData.email.length === 0 ||\n                  !validateEmail(formData.email) ||\n                  formData.subject.length === 0 ||\n                  formData.description.length === 0\n                }\n              >\n                Submit\n              </Button>\n            </Card>\n            <Modal\n              title=\"Received\"\n              visible={openModal}\n              onOk={handleOk}\n              onCancel={null}\n              closable={false}\n              footer={[\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  onClick={() => {\n                    goToNextPage({\n                      nextPageId: \"homePage\",\n                      currentPageId: pageId,\n                      display: \"Submitted\",\n                    });\n                    setOpenModal(false);\n                  }}\n                >\n                  Okay\n                </Button>,\n              ]}\n            >\n              <p className=\"text-base\">Successfully submitted your issue.</p>\n              <p className=\"text-base\">\n                Someone from our team will contact you.\n              </p>\n            </Modal>\n          </>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nexport default UserForm;\n","import { Button, Col, Row } from \"antd\";\nimport React from \"react\";\n\nfunction ButtonOptions({ buttonList, pageId, onClick }) {\n  return (\n    <Row gutter={16} className=\"text-center justify-center\">\n      {(buttonList ?? []).map(({ display, nextPage }) => (\n        <Col className=\"gutter-row pb-6\" xs={24} md={8} key={nextPage}>\n          <Button\n            size=\"large\"\n            className=\"bg-transparent rounded-lg border border-black h-14 w-full whitespace-normal\"\n            onClick={() =>\n              onClick({\n                nextPageId: nextPage,\n                currentPageId: pageId,\n                display,\n              })\n            }\n          >\n            {display}\n          </Button>\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nexport default ButtonOptions;\n","import { Button, Col, Row } from \"antd\";\nimport React from \"react\";\nimport AppContext from \"../../context/AppContext\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport ReactMarkdown from \"react-markdown\";\nimport UserForm from \"./UserForm\";\nimport ButtonOptions from \"./ButtonOptions\";\n\nfunction Home() {\n  return (\n    <AppContext.Consumer>\n      {({ goToNextPage, history, goToPrevPage }) => {\n        const { pageId, title, question, answers } =\n          history[history.length - 1];\n        return (\n          <>\n            {history.length > 1 && (\n              <Row className=\"p-5 border-b border-gray-300\">\n                <Col span={12}>\n                  <Button\n                    className=\"bg-transparent border-none shadow-none\"\n                    onClick={() => goToPrevPage()}\n                    icon={<ArrowLeftOutlined className=\"relative -top-0.5\" />}\n                  >\n                    Back\n                  </Button>\n                </Col>\n              </Row>\n            )}\n            {pageId !== \"openCasePage\" && (\n              <Row justify=\"center\" className=\"p-5\">\n                <Col xs={0} md={4}></Col>\n                <Col xs={24} md={16}>\n                  <Row>\n                    <Col span={24}></Col>\n                    <Col span={24}>\n                      {title && (\n                        <div>\n                          {title.map((t) => (\n                            <div className=\"pb-2\">\n                              <ReactMarkdown\n                                className=\"text-base\"\n                                key={`title-${t}`}\n                                children={t}\n                              />\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                      {question && (\n                        <p className=\"text-center text-sm p-5 rounded-lg border border-blue-500 text-blue-500 my-3.5\">\n                          {question}\n                        </p>\n                      )}\n                    </Col>\n                    <Col span={24} className=\"pt-3\">\n                      <ButtonOptions\n                        buttonList={answers}\n                        onClick={({ nextPageId, currentPageId, display }) =>\n                          goToNextPage({\n                            nextPageId,\n                            currentPageId,\n                            display,\n                          })\n                        }\n                        pageId={pageId}\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n                <Col xs={0} md={4}></Col>\n              </Row>\n            )}\n            {pageId === \"openCasePage\" && (\n              <Row justify=\"center\" className=\"p-5\">\n                <Col xs={0} md={4}></Col>\n                <Col xs={24} md={16}>\n                  <UserForm />\n                </Col>\n                <Col xs={0} md={4}></Col>\n              </Row>\n            )}\n          </>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n}\n\nexport default Home;\n","import \"./App.css\";\nimport Layout, { Content, Header } from \"antd/lib/layout/layout\";\nimport Home from \"./views/Home\";\nimport { lazy, Suspense, useState } from \"react\";\nimport AppContext from \"./context/AppContext\";\nimport { Button, Divider, Timeline } from \"antd\";\nimport Sidebar from \"react-sidebar\";\nimport { CloseOutlined, HistoryOutlined } from \"@ant-design/icons\";\n// import AppProvider from \"./context/AppProvider\";\n\nconst AppProvider = lazy(() => import(\"./context/AppProvider\"));\n\nfunction App() {\n  const [openSideBar, setOpenSideBar] = useState(false);\n\n  return (\n    <Suspense\n      fallback={\n        <div>\n          <div className=\"flex justify-center items-center h-screen w-screen\">\n            Loading...\n          </div>\n        </div>\n      }\n    >\n      <AppProvider>\n        <AppContext.Consumer>\n          {({ history }) => {\n            return (\n              <Sidebar\n                sidebar={\n                  <div className=\"w-80\">\n                    <Button\n                      onClick={() => setOpenSideBar(false)}\n                      icon={<CloseOutlined className=\"relative -top-0.5\" />}\n                      className=\"mt-3 border-none bg-transparent shadow-none\"\n                    >\n                      Close\n                    </Button>\n                    <Divider />\n                    <div className=\"px-8 pt-2\">\n                      <Timeline>\n                        {history.slice(1).length !== 0 &&\n                          history.slice(1).map(({ selectedAnswer }) => (\n                            <Timeline.Item\n                              key={`${selectedAnswer}-${Math.random()}`}\n                            >\n                              <div className=\"text-sm font-medium\">\n                                Question\n                              </div>\n                              <div className=\"text-sm text-gray-400\">\n                                {selectedAnswer}\n                              </div>\n                            </Timeline.Item>\n                          ))}\n                        {history.slice(1).length === 0 && (\n                          <div className=\"text-sm\">No History</div>\n                        )}\n                      </Timeline>\n                    </div>\n                  </div>\n                }\n                open={openSideBar}\n                styles={{ sidebar: { background: \"white\" } }}\n                pullRight\n                onSetOpen={() => setOpenSideBar(false)}\n              >\n                <Layout>\n                  <Header>\n                    <Button\n                      className=\"float-right m-3 relative\"\n                      onClick={() => setOpenSideBar(true)}\n                      icon={<HistoryOutlined className=\"relative -top-0.5\" />}\n                    >\n                      History\n                    </Button>\n                  </Header>\n                  <Content\n                    style={{\n                      height: \"90vh\",\n                    }}\n                  >\n                    <Home />\n                  </Content>\n                </Layout>\n              </Sidebar>\n            );\n          }}\n        </AppContext.Consumer>\n      </AppProvider>\n    </Suspense>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createContext } from \"react\";\n\nconst AppContext = createContext();\n\nexport default AppContext;\n"],"sourceRoot":""}